
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.DirectoryStream;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.ListModel;
import javax.swing.event.ListDataListener;

public class ImageSorterUI extends JFrame {

    static class SelectionListModel<String> implements ListModel {

        private String[] typeNames;

        public SelectionListModel(String[] typeNames) {
            this.typeNames = typeNames;
        }

        @Override
        public String getElementAt(int index) {
            return typeNames[index];
        }

        @Override
        public int getSize() {
            return typeNames.length;
        }

        @Override
        public void addListDataListener(ListDataListener ldl) {
        }

        @Override
        public void removeListDataListener(ListDataListener ldl) {
        }
    }

    private String[] typeNames;
    private ListModel typesListModel;

    private DirectoryStream<Path> inputDirectory;
    private Iterator<Path> inputIter;

    private File currentFile;

    public ImageSorterUI(DirectoryStream<Path> inputDirectory, String[] typeNames) {
        this.typeNames = typeNames;
        this.inputDirectory = inputDirectory;
        inputIter = inputDirectory.iterator();

        typesListModel = new SelectionListModel(typeNames);

        initComponents();

        if (inputIter.hasNext()) {
            currentFile = inputIter.next().toFile();
            imageShow.setIcon(new ImageIcon(importImage(currentFile)));
            imageName.setText(currentFile.getName());
        } else {
            imageShow.setText("MOVE ALONG, NOTHING TO SEE HERE");
            imageName.setText("literally no image here.girrafe");
            try {
                inputDirectory.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private BufferedImage importImage(File f) {
        BufferedImage image = null;
        try {
            image = ImageIO.read(f);
        } catch (Exception e) {
            System.err.println("Failed to import image " + f.getName());
            e.printStackTrace();
            return null;
        }
        return image;
    }

    private void nextImage() {
        if (currentFile == null) {
            return;
        }

        int selectedIndex = typesList.getSelectedIndex();
        int cameraIndex = cameraList.getSelectedIndex();
        int locationIndex = locationList.getSelectedIndex();

        if (selectedIndex >= 0 && cameraIndex >= 0 && locationIndex >= 0) {

            String selectedType = typesList.getSelectedValue();

            String prefix = "";
            if (cameraIndex == 0) {
                prefix += "OLD_";
            } else if (cameraIndex == 1) {
                prefix += "NEW_";
            }

            if (locationIndex == 0) {
                prefix += "POOL_";
            } else if (locationIndex == 1) {
                prefix += "COMP_";
            }

            currentFile.renameTo(new File(ImageSorterLauncher.OUTPUT_FOLDER + "/" + selectedType + "/" + prefix + currentFile.getName()));

            if (inputIter.hasNext()) {
                currentFile = inputIter.next().toFile();
                imageShow.setIcon(new ImageIcon(importImage(currentFile)));
                imageName.setText(currentFile.getName());
            } else {
                currentFile = null;
                imageShow.setIcon(null);
                imageShow.setText("MOVE ALONG, NOTHING TO SEE HERE");
                imageName.setText("literally no image here.girrafe");

                try {
                    inputDirectory.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagePanel = new javax.swing.JPanel();
        imageShow = new javax.swing.JLabel();
        imageName = new javax.swing.JLabel();
        selectionPanel = new javax.swing.JPanel();
        selectionListPane = new javax.swing.JScrollPane();
        typesList = new javax.swing.JList<>();
        nextImageButton = new javax.swing.JButton();
        cameraListPane = new javax.swing.JScrollPane();
        cameraList = new javax.swing.JList<>();
        locationListPane = new javax.swing.JScrollPane();
        locationList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                handleKeyPressed(evt);
            }
        });

        imageShow.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageShow.setMaximumSize(new java.awt.Dimension(644, 482));
        imageShow.setMinimumSize(new java.awt.Dimension(644, 482));
        imageShow.setPreferredSize(new java.awt.Dimension(644, 482));

        imageName.setText("imagename");

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(imageName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(imageShow, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, imagePanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(imageName)
                .addGap(18, 18, 18)
                .addComponent(imageShow, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        typesList.setModel(typesListModel);
        typesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        typesList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                typesListKeyPressed(evt);
            }
        });
        selectionListPane.setViewportView(typesList);

        nextImageButton.setText("Next Image");
        nextImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextImageButtonActionPerformed(evt);
            }
        });

        cameraListPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        cameraListPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        cameraList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Flat Camera", "Fisheye (Distortion)" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        cameraList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        cameraList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cameraListKeyPressed(evt);
            }
        });
        cameraListPane.setViewportView(cameraList);

        locationListPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        locationListPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        locationList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Pool", "Competiton" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        locationList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        locationList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                locationListKeyPressed(evt);
            }
        });
        locationListPane.setViewportView(locationList);

        javax.swing.GroupLayout selectionPanelLayout = new javax.swing.GroupLayout(selectionPanel);
        selectionPanel.setLayout(selectionPanelLayout);
        selectionPanelLayout.setHorizontalGroup(
            selectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nextImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(selectionPanelLayout.createSequentialGroup()
                        .addComponent(selectionListPane, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(selectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cameraListPane)
                            .addComponent(locationListPane))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        selectionPanelLayout.setVerticalGroup(
            selectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(selectionPanelLayout.createSequentialGroup()
                        .addComponent(cameraListPane, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(locationListPane, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(selectionListPane))
                .addGap(18, 18, 18)
                .addComponent(nextImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(146, 146, 146))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(selectionPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextImageButtonActionPerformed
        nextImage();
    }//GEN-LAST:event_nextImageButtonActionPerformed

    private void handleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_handleKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            nextImage();
        }
    }//GEN-LAST:event_handleKeyPressed

    private void typesListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_typesListKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            nextImage();
        }
    }//GEN-LAST:event_typesListKeyPressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            inputDirectory.close();
            System.out.println("Window Closed. Input Directory Closed.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowClosing

    private void cameraListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cameraListKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            nextImage();
        }
    }//GEN-LAST:event_cameraListKeyPressed

    private void locationListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_locationListKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            nextImage();
        }
    }//GEN-LAST:event_locationListKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> cameraList;
    private javax.swing.JScrollPane cameraListPane;
    private javax.swing.JLabel imageName;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JLabel imageShow;
    private javax.swing.JList<String> locationList;
    private javax.swing.JScrollPane locationListPane;
    private javax.swing.JButton nextImageButton;
    private javax.swing.JScrollPane selectionListPane;
    private javax.swing.JPanel selectionPanel;
    private javax.swing.JList<String> typesList;
    // End of variables declaration//GEN-END:variables

}
